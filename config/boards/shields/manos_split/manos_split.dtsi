#include <physical_layouts.dtsi>
#include <dt-bindings/zmk/matrix_transform.h>

#define MIRYOKU_DOUBLE_TAP_GUARD(NAME, BINDING) \
/ { \
  behaviors { \
    NAME: NAME { \
      compatible = "zmk,behavior-tap-dance"; \
      #binding-cells = <0>; \
      tapping-term-ms = <U_TAPPING_TERM>; \
      bindings = <&none>, <BINDING>; \
    }; \
  }; \
};

#define MIRYOKU_X(LAYER, STRING) \
MIRYOKU_DOUBLE_TAP_GUARD(u_to_U_##LAYER, &to U_##LAYER)
MIRYOKU_LAYER_LIST
#undef MIRYOKU_X

#if defined (MIRYOKU_KLUDGE_DOUBLETAPBOOT)
  #if defined (MIRYOKU_KLUDGE_SOFT_OFF)
MIRYOKU_DOUBLE_TAP_GUARD(u_soft_off, &soft_off)
  #else
MIRYOKU_DOUBLE_TAP_GUARD(u_bootloader, &bootloader)
  #endif
#endif

#define MIRYOKU_KLUDGE_BOTTOMROWCOMBOS_TERM 50
#define MIRYOKU_KLUDGE_BOTTOMROWCOMBOS_MACRO(LAYER, POSITION, BINDING) \
bottomrowcombos_ ## LAYER ## _ ## POSITION { \
  layers = <LAYER>; \
  key-positions = <MIRYOKU_KLUDGE_BOTTOMROWCOMBOS_ ## POSITION>; \
  bindings = <BINDING>; \
  timeout-ms = <MIRYOKU_KLUDGE_BOTTOMROWCOMBOS_TERM>; \
};

#define MIRYOKU_X(CODE, EMPTY) \
MIRYOKU_TAPDELAY_TAP(CODE##EMPTY) \
MIRYOKU_TAPDELAY_MT(CODE##EMPTY) \
MIRYOKU_TAPDELAY_LT(CODE##EMPTY)

MIRYOKU_TAPDELAY_LIST

#undef MIRYOKU_X


&mmv {
  acceleration-exponent = <U_MOUSE_MOVE_EXPONENT>;
  time-to-max-speed-ms = <U_MOUSE_MOVE_TIME>;
  delay-ms = <U_MOUSE_MOVE_DELAY>;
};

/*
&msc {
  acceleration-exponent = <U_MOUSE_SCROLL_EXPONENT>;
  time-to-max-speed-ms = <U_MOUSE_SCROLL_TIME>;
  delay-ms = <U_MOUSE_SCROLL_DELAY>;
};
*/

#define MIRYOKU_KLUDGE_THUMBCOMBOS_TERM 200
#define MIRYOKU_KLUDGE_THUMBCOMBOS_MACRO(LAYER, POSITION, BINDING) \
thumbcombos_ ## LAYER ## _ ## POSITION { \
  layers = <LAYER>; \
  key-positions = <MIRYOKU_KLUDGE_THUMBCOMBOS_ ## POSITION>; \
  bindings = <BINDING>; \
  timeout-ms = <MIRYOKU_KLUDGE_THUMBCOMBOS_TERM>; \
};

U_MACRO(u_macro_btn1, wait-ms = <0>; bindings = <&kp KP_SLASH &kp KP_N5>;)
U_MACRO(u_macro_btn2, wait-ms = <0>; bindings = <&kp KP_MINUS &kp KP_N5>;)
U_MACRO(u_macro_btn3, wait-ms = <0>; bindings = <&kp KP_ASTERISK &kp KP_N5>;)

#define MIRYOKU_SHIFT_FUNCTION(NAME, BINDING, SHIFT_BINDING) \
/ { \
  behaviors { \
    NAME: NAME { \
      compatible = "zmk,behavior-mod-morph"; \
      #binding-cells = <0>; \
      bindings = <BINDING>, <SHIFT_BINDING>; \
      mods = <(MOD_LSFT|MOD_RSFT)>; \
    }; \
  }; \
};

#define MIRYOKU_SHIFT_MACRO(NAME, BINDING, SHIFT_BINDING) \
U_MACRO(u_macro_ ## NAME, wait-ms = <0>; bindings = <SHIFT_BINDING>;) \
MIRYOKU_SHIFT_FUNCTION(NAME, BINDING, &u_macro_ ## NAME)

MIRYOKU_SHIFT_MACRO(u_bt_sel_0, &bt BT_SEL 0, &bt BT_SEL 0 &bt BT_CLR)
MIRYOKU_SHIFT_MACRO(u_bt_sel_1, &bt BT_SEL 1, &bt BT_SEL 1 &bt BT_CLR)
MIRYOKU_SHIFT_MACRO(u_bt_sel_2, &bt BT_SEL 2, &bt BT_SEL 2 &bt BT_CLR)
MIRYOKU_SHIFT_MACRO(u_bt_sel_3, &bt BT_SEL 3, &bt BT_SEL 3 &bt BT_CLR)
MIRYOKU_SHIFT_MACRO(u_bt_sel_4, &bt BT_SEL 4, &bt BT_SEL 4 &bt BT_CLR)

MIRYOKU_SHIFT_FUNCTION(u_out_tog, &out OUT_TOG, &out OUT_USB)

MIRYOKU_SHIFT_FUNCTION(u_caps_word, &caps_word, &kp CAPS)

MIRYOKU_SHIFT_FUNCTION(u_rgb_tog, &rgb_ug RGB_TOG, &rgb_ug RGB_OFF)

MIRYOKU_SHIFT_FUNCTION(u_rgb_eff, &rgb_ug RGB_EFF, &rgb_ug RGB_EFR)
MIRYOKU_SHIFT_FUNCTION(u_rgb_hui, &rgb_ug RGB_HUI, &rgb_ug RGB_HUD)
MIRYOKU_SHIFT_FUNCTION(u_rgb_sai, &rgb_ug RGB_SAI, &rgb_ug RGB_SAD)
MIRYOKU_SHIFT_FUNCTION(u_rgb_bri, &rgb_ug RGB_BRI, &rgb_ug RGB_BRD)

MIRYOKU_SHIFT_FUNCTION(u_ep_tog, &ext_power EP_TOG, &ext_power EP_OFF)

#define MIRYOKU_KLUDGE_TOPROWCOMBOS_TERM 50
#define MIRYOKU_KLUDGE_TOPROWCOMBOS_MACRO(LAYER, POSITION, BINDING) \
toprowcombos_ ## LAYER ## _ ## POSITION { \
  layers = <LAYER>; \
  key-positions = <MIRYOKU_KLUDGE_TOPROWCOMBOS_ ## POSITION>; \
  bindings = <BINDING>; \
  timeout-ms = <MIRYOKU_KLUDGE_TOPROWCOMBOS_TERM>; \
};

/ {
    chosen {
        zmk,physical-layout = &layout;
    };

    kscan: kscan {
        compatible = "zmk,kscan-gpio-matrix";
        diode-direction = "col2row";

        row-gpios = <&pro_micro 18 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>,
                    <&pro_micro 15 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>,
                    <&pro_micro 14 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>,
                    <&pro_micro 16 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>,
                    <&pro_micro 10 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>;
    };

    transform: matrix_transform {
        compatible = "zmk,matrix-transform";
        rows = <5>;
        columns = <12>;

        map = <
                RC(0, 0) RC(0, 1) RC(0, 2) RC(0, 3) RC(0, 4) RC(0, 5) RC(0, 6) RC(0, 7) RC(0, 8) RC(0, 9) RC(0, 10) RC(0, 11)
                RC(1, 0) RC(1, 1) RC(1, 2) RC(1, 3) RC(1, 4) RC(1, 5) RC(1, 6) RC(1, 7) RC(1, 8) RC(1, 9) RC(1, 10) RC(1, 11)
                RC(2, 0) RC(2, 1) RC(2, 2) RC(2, 3) RC(2, 4) RC(2, 5) RC(2, 6) RC(2, 7) RC(2, 8) RC(2, 9) RC(2, 10) RC(2, 11)
                RC(3, 0) RC(3, 1) RC(3, 2) RC(3, 3) RC(3, 4) RC(3, 5) RC(3, 6) RC(3, 7) RC(3, 8) RC(3, 9) RC(3, 10) RC(3, 11)
                RC(4, 0) RC(4, 1) RC(4, 2) RC(4, 3) RC(4, 4) RC(4, 5) RC(4, 6) RC(4, 7) RC(4, 8) RC(4, 9) RC(4, 10) RC(4, 11)
        >;
    };

    layout: layout {
        compatible = "zmk,physical-layout";
        display-name = "Split Ortho 5x6";
        transform = <&transform>;
        kscan = <&kscan>;

        keys  //                     w   h    x    y     rot    rx    ry
            = <&key_physical_attrs 100 100    0    0       0     0     0>
            , <&key_physical_attrs 100 100  100    0       0     0     0>
            , <&key_physical_attrs 100 100  200    0       0     0     0>
            , <&key_physical_attrs 100 100  300    0       0     0     0>
            , <&key_physical_attrs 100 100  400    0       0     0     0>
            , <&key_physical_attrs 100 100  500    0       0     0     0>
            , <&key_physical_attrs 100 100  700    0       0     0     0>
            , <&key_physical_attrs 100 100  800    0       0     0     0>
            , <&key_physical_attrs 100 100  900    0       0     0     0>
            , <&key_physical_attrs 100 100 1000    0       0     0     0>
            , <&key_physical_attrs 100 100 1100    0       0     0     0>
            , <&key_physical_attrs 100 100 1200    0       0     0     0>
            , <&key_physical_attrs 100 100    0  100       0     0     0>
            , <&key_physical_attrs 100 100  100  100       0     0     0>
            , <&key_physical_attrs 100 100  200  100       0     0     0>
            , <&key_physical_attrs 100 100  300  100       0     0     0>
            , <&key_physical_attrs 100 100  400  100       0     0     0>
            , <&key_physical_attrs 100 100  500  100       0     0     0>
            , <&key_physical_attrs 100 100  700  100       0     0     0>
            , <&key_physical_attrs 100 100  800  100       0     0     0>
            , <&key_physical_attrs 100 100  900  100       0     0     0>
            , <&key_physical_attrs 100 100 1000  100       0     0     0>
            , <&key_physical_attrs 100 100 1100  100       0     0     0>
            , <&key_physical_attrs 100 100 1200  100       0     0     0>
            , <&key_physical_attrs 100 100    0  200       0     0     0>
            , <&key_physical_attrs 100 100  100  200       0     0     0>
            , <&key_physical_attrs 100 100  200  200       0     0     0>
            , <&key_physical_attrs 100 100  300  200       0     0     0>
            , <&key_physical_attrs 100 100  400  200       0     0     0>
            , <&key_physical_attrs 100 100  500  200       0     0     0>
            , <&key_physical_attrs 100 100  700  200       0     0     0>
            , <&key_physical_attrs 100 100  800  200       0     0     0>
            , <&key_physical_attrs 100 100  900  200       0     0     0>
            , <&key_physical_attrs 100 100 1000  200       0     0     0>
            , <&key_physical_attrs 100 100 1100  200       0     0     0>
            , <&key_physical_attrs 100 100 1200  200       0     0     0>
            , <&key_physical_attrs 100 100    0  300       0     0     0>
            , <&key_physical_attrs 100 100  100  300       0     0     0>
            , <&key_physical_attrs 100 100  200  300       0     0     0>
            , <&key_physical_attrs 100 100  300  300       0     0     0>
            , <&key_physical_attrs 100 100  400  300       0     0     0>
            , <&key_physical_attrs 100 100  500  300       0     0     0>
            , <&key_physical_attrs 100 100  700  300       0     0     0>
            , <&key_physical_attrs 100 100  800  300       0     0     0>
            , <&key_physical_attrs 100 100  900  300       0     0     0>
            , <&key_physical_attrs 100 100 1000  300       0     0     0>
            , <&key_physical_attrs 100 100 1100  300       0     0     0>
            , <&key_physical_attrs 100 100 1200  300       0     0     0>
            , <&key_physical_attrs 100 100    0  400       0     0     0>
            , <&key_physical_attrs 100 100  100  400       0     0     0>
            , <&key_physical_attrs 100 100  200  400       0     0     0>
            , <&key_physical_attrs 100 100  300  400       0     0     0>
            , <&key_physical_attrs 100 100  400  400       0     0     0>
            , <&key_physical_attrs 100 100  500  400       0     0     0>
            , <&key_physical_attrs 100 100  700  400       0     0     0>
            , <&key_physical_attrs 100 100  800  400       0     0     0>
            , <&key_physical_attrs 100 100  900  400       0     0     0>
            , <&key_physical_attrs 100 100 1000  400       0     0     0>
            , <&key_physical_attrs 100 100 1100  400       0     0     0>
            , <&key_physical_attrs 100 100 1200  400       0     0     0>
            ;
    };

    behaviors {
        u_mt: u_mt {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        tapping-term-ms = <U_TAPPING_TERM>;
        flavor = "tap-preferred";
        bindings = <&kp>, <&kp>;
        };
        u_lt: u_lt {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        tapping-term-ms = <U_TAPPING_TERM>;
        flavor = "tap-preferred";
        bindings = <&mo>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";
        MIRYOKU_KLUDGE_BOTTOMROWCOMBOS_MACRO(U_BASE, LEFTPINKIE, &kp Z)
        MIRYOKU_KLUDGE_BOTTOMROWCOMBOS_MACRO(U_BASE, LEFTINNERINDEX, &kp B)
        MIRYOKU_KLUDGE_BOTTOMROWCOMBOS_MACRO(U_BASE, RIGHTINNERINDEX, &kp N)
        MIRYOKU_KLUDGE_BOTTOMROWCOMBOS_MACRO(U_BASE, RIGHTPINKIE, &kp BSLH)

        MIRYOKU_KLUDGE_BOTTOMROWCOMBOS_MACRO(U_NAV, LEFTPINKIE, U_NA)
        MIRYOKU_KLUDGE_BOTTOMROWCOMBOS_MACRO(U_NAV, LEFTINNERINDEX, U_NA)
        MIRYOKU_KLUDGE_BOTTOMROWCOMBOS_MACRO(U_NAV, RIGHTINNERINDEX, &kp INS)
        MIRYOKU_KLUDGE_BOTTOMROWCOMBOS_MACRO(U_NAV, RIGHTPINKIE, &kp END)

        MIRYOKU_KLUDGE_BOTTOMROWCOMBOS_MACRO(U_MOUSE, LEFTPINKIE, U_NA)
        MIRYOKU_KLUDGE_BOTTOMROWCOMBOS_MACRO(U_MOUSE, LEFTINNERINDEX, U_NA)
        MIRYOKU_KLUDGE_BOTTOMROWCOMBOS_MACRO(U_MOUSE, RIGHTINNERINDEX, U_NU)
        MIRYOKU_KLUDGE_BOTTOMROWCOMBOS_MACRO(U_MOUSE, RIGHTPINKIE, U_WH_R)

        MIRYOKU_KLUDGE_BOTTOMROWCOMBOS_MACRO(U_MEDIA, LEFTPINKIE, U_NA)
        MIRYOKU_KLUDGE_BOTTOMROWCOMBOS_MACRO(U_MEDIA, LEFTINNERINDEX, U_NA)
        MIRYOKU_KLUDGE_BOTTOMROWCOMBOS_MACRO(U_MEDIA, RIGHTINNERINDEX, &u_out_tog)
        MIRYOKU_KLUDGE_BOTTOMROWCOMBOS_MACRO(U_MEDIA, RIGHTPINKIE, &u_bt_sel_3)

        MIRYOKU_KLUDGE_BOTTOMROWCOMBOS_MACRO(U_NUM, LEFTPINKIE, &kp GRAVE)
        MIRYOKU_KLUDGE_BOTTOMROWCOMBOS_MACRO(U_NUM, LEFTINNERINDEX, &kp BSLH)
        MIRYOKU_KLUDGE_BOTTOMROWCOMBOS_MACRO(U_NUM, RIGHTINNERINDEX, U_NA)
        MIRYOKU_KLUDGE_BOTTOMROWCOMBOS_MACRO(U_NUM, RIGHTPINKIE, U_NA)

        MIRYOKU_KLUDGE_BOTTOMROWCOMBOS_MACRO(U_SYM, LEFTPINKIE, &kp TILDE)
        MIRYOKU_KLUDGE_BOTTOMROWCOMBOS_MACRO(U_SYM, LEFTINNERINDEX, &kp PIPE)
        MIRYOKU_KLUDGE_BOTTOMROWCOMBOS_MACRO(U_SYM, RIGHTINNERINDEX, U_NA)
        MIRYOKU_KLUDGE_BOTTOMROWCOMBOS_MACRO(U_SYM, RIGHTPINKIE, U_NA)

        MIRYOKU_KLUDGE_BOTTOMROWCOMBOS_MACRO(U_FUN, LEFTPINKIE, &kp F10)
        MIRYOKU_KLUDGE_BOTTOMROWCOMBOS_MACRO(U_FUN, LEFTINNERINDEX, &kp PAUSE_BREAK)
        MIRYOKU_KLUDGE_BOTTOMROWCOMBOS_MACRO(U_FUN, RIGHTINNERINDEX, U_NA)
        MIRYOKU_KLUDGE_BOTTOMROWCOMBOS_MACRO(U_FUN, RIGHTPINKIE, U_NA)

        MIRYOKU_KLUDGE_BOTTOMROWCOMBOS_MACRO(U_BUTTON, LEFTPINKIE, U_UND)
        MIRYOKU_KLUDGE_BOTTOMROWCOMBOS_MACRO(U_BUTTON, LEFTINNERINDEX, U_RDO)
        MIRYOKU_KLUDGE_BOTTOMROWCOMBOS_MACRO(U_BUTTON, RIGHTINNERINDEX, U_RDO)
        MIRYOKU_KLUDGE_BOTTOMROWCOMBOS_MACRO(U_BUTTON, RIGHTPINKIE, U_UND)

        MIRYOKU_KLUDGE_TOPROWCOMBOS_MACRO(U_BASE, LEFTPINKIE, &kp Q)
        MIRYOKU_KLUDGE_TOPROWCOMBOS_MACRO(U_BASE, LEFTINNERINDEX, &kp T)
        MIRYOKU_KLUDGE_TOPROWCOMBOS_MACRO(U_BASE, RIGHTINNERINDEX, &kp Y)
        MIRYOKU_KLUDGE_TOPROWCOMBOS_MACRO(U_BASE, RIGHTPINKIE, &kp P)

        MIRYOKU_KLUDGE_TOPROWCOMBOS_MACRO(U_NAV, LEFTPINKIE, &bootloader)
        MIRYOKU_KLUDGE_TOPROWCOMBOS_MACRO(U_NAV, LEFTINNERINDEX, U_NA)
        MIRYOKU_KLUDGE_TOPROWCOMBOS_MACRO(U_NAV, RIGHTINNERINDEX, U_RDO)
        MIRYOKU_KLUDGE_TOPROWCOMBOS_MACRO(U_NAV, RIGHTPINKIE, U_UND)

        MIRYOKU_KLUDGE_TOPROWCOMBOS_MACRO(U_MOUSE, LEFTPINKIE, &bootloader)
        MIRYOKU_KLUDGE_TOPROWCOMBOS_MACRO(U_MOUSE, LEFTINNERINDEX, U_NA)
        MIRYOKU_KLUDGE_TOPROWCOMBOS_MACRO(U_MOUSE, RIGHTINNERINDEX, U_RDO)
        MIRYOKU_KLUDGE_TOPROWCOMBOS_MACRO(U_MOUSE, RIGHTPINKIE, U_UND)

        MIRYOKU_KLUDGE_TOPROWCOMBOS_MACRO(U_MEDIA, LEFTPINKIE, &bootloader)
        MIRYOKU_KLUDGE_TOPROWCOMBOS_MACRO(U_MEDIA, LEFTINNERINDEX, U_NA)
        MIRYOKU_KLUDGE_TOPROWCOMBOS_MACRO(U_MEDIA, RIGHTINNERINDEX, &rgb_ug RGB_TOG)
        MIRYOKU_KLUDGE_TOPROWCOMBOS_MACRO(U_MEDIA, RIGHTPINKIE, &u_rgb_bri)
        
        MIRYOKU_KLUDGE_TOPROWCOMBOS_MACRO(U_NUM, LEFTPINKIE, &kp LBKT)
        MIRYOKU_KLUDGE_TOPROWCOMBOS_MACRO(U_NUM, LEFTINNERINDEX, &kp RBKT)
        MIRYOKU_KLUDGE_TOPROWCOMBOS_MACRO(U_NUM, RIGHTINNERINDEX, U_NA)
        MIRYOKU_KLUDGE_TOPROWCOMBOS_MACRO(U_NUM, RIGHTPINKIE, &bootloader)

        MIRYOKU_KLUDGE_TOPROWCOMBOS_MACRO(U_SYM, LEFTPINKIE, &kp LBRC)
        MIRYOKU_KLUDGE_TOPROWCOMBOS_MACRO(U_SYM, LEFTINNERINDEX, &kp RBRC)
        MIRYOKU_KLUDGE_TOPROWCOMBOS_MACRO(U_SYM, RIGHTINNERINDEX, U_NA)
        MIRYOKU_KLUDGE_TOPROWCOMBOS_MACRO(U_SYM, RIGHTPINKIE, &bootloader)

        MIRYOKU_KLUDGE_TOPROWCOMBOS_MACRO(U_FUN, LEFTPINKIE, &kp F12)
        MIRYOKU_KLUDGE_TOPROWCOMBOS_MACRO(U_FUN, LEFTINNERINDEX, &kp PSCRN)
        MIRYOKU_KLUDGE_TOPROWCOMBOS_MACRO(U_FUN, RIGHTINNERINDEX, U_NA)
        MIRYOKU_KLUDGE_TOPROWCOMBOS_MACRO(U_FUN, RIGHTPINKIE, &bootloader)

        MIRYOKU_KLUDGE_TOPROWCOMBOS_MACRO(U_BUTTON, LEFTPINKIE, U_UND)
        MIRYOKU_KLUDGE_TOPROWCOMBOS_MACRO(U_BUTTON, LEFTINNERINDEX, U_RDO)
        MIRYOKU_KLUDGE_TOPROWCOMBOS_MACRO(U_BUTTON, RIGHTINNERINDEX, U_RDO)
        MIRYOKU_KLUDGE_TOPROWCOMBOS_MACRO(U_BUTTON, RIGHTPINKIE, U_UND)
    };
};
